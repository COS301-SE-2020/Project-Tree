<!DOCTYPE html>
<html>
    <head>
        <style>
            #toolbar{
                display: none;
            }
            #paper{
                height: 100vh; 
                width: 100vw;
            }
        </style>
        <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jointjs/2.1.0/joint.css" />
        <meta name="viewport" content="height=device-height, width=device-width, user-scalable=no" />
    </head>
    <body>
        <!-- content -->
        <!-- <div id="myholder"></div> -->
        <p id="p1"></p>
        <div id="toolbar">
            <textarea id="adjacency-list" width="200">
                {
                    "nodes": <%= tasks %>,
                    "rels": <%= rels %>
                }
            </textarea>
            <br/>
            <button id="btn-layout">Layout</button>
        </div>
        <div id="paper"></div>
        <!-- <p ontouchstart="TouchStart()" ontouchmove="TouchMove()">Touch me!</p> 
        ontouchstart="TouchStart()" ontouchmove="TouchMove()" ontouchend="TouchEnd()"-->
        

        <!-- dependencies -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/dagre/0.8.5/dagre.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/graphlib/2.1.8/graphlib.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/dagre-d3/0.6.4/dagre-d3.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.1/lodash.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jointjs/2.1.0/joint.js"></script>
        <!-- code -->
    <script type="text/javascript">
        var dragStartPosition
        var nodeTouch = false;
        var count = 0;

        var graph = new joint.dia.Graph();
        var paper = new joint.dia.Paper({
            el: $('#paper'),
            gridSize: 1,
            model: graph,
            linkPinning: false,
            interactive: false
        });

        paper.on('element:pointerdown', (event) => {handleNodeClick(event.model.attributes.attrs.text.text)});
        
        function handleNodeClick(input){
            count++;
            nodeTouch = true
            document.getElementById("p1").innerHTML = input; 
        }

        paper.on('blank:pointerdown', (event, x, y) =>{
            dragStartPosition = { x: x, y: y};
            handleNodeClick(dragStartPosition.x + " " + dragStartPosition.y)
        });

        paper.on('blank:pointerup', ()=>{
            dragStartPosition = null;
        });
        
        paper.on('blank:pointermove', (event, x, y)=>{
            if (dragStartPosition){
                handleNodeClick(event.clientX + " " + event.clientY)
                paper.translate(
                    event.clientX - dragStartPosition.x, 
                    event.clientY - dragStartPosition.y
                );
            }
        });
        
        function buildGraph(data) {
            var elements = [];
            var links = [];
            
            _.each(data.nodes, function(node) {
            elements.push(makeElement(node));
            })
            
            _.each(data.rels, function(edge) {
            links.push(makeLink(edge)); 
            })
            return elements.concat(links);
        }
        
        function makeLink(edge) {
            return new joint.shapes.standard.Link({
                id:"l"+edge.id,
                source: { id: edge.source },
                target: { id: edge.target },
                attrs: {
                    type:'link'
                }
            })
        }
        
        function makeElement(node) {
            var maxLineLength = _.max(node.name.split('\n'), function(l) { return l.length; }).length;
    
            var letterSize = 12;
            var width = 2 * (letterSize * (0.6 * maxLineLength + 1));
            var height = 2 * ((node.name.split('\n').length + 1) * letterSize);

            var statusColor = '#fff'
            if(node.progress === "Incomplete"){
                let today = new Date();
                if(parseInt(today.getFullYear()) <= parseInt(node.endDate.year.low)){
                    if(parseInt(today.getMonth()+1)<=parseInt(node.endDate.month.low)){
                        if(parseInt(today.getMonth()+1)===parseInt(node.endDate.month.low))
                        {
                            if(parseInt(today.getDate()) > parseInt(node.endDate.day.low)){
                                statusColor = '#ff6961'
                            }
                        }
                    }
                    else{
                        statusColor = '#ff6961'
                    }
                }
                else{
                    statusColor = '#ff6961'
                }
            }
            else if(node.progress === "Complete"){
                statusColor = '#77dd77'
            }
            else if(node.progress === "Issue"){
                statusColor = '#ffae42'
            }

            return new joint.shapes.standard.Rectangle({
                id: node.id,
                size: { width: width, height: height },
                attrs: {
                    type:'node',
                    body: {
                        fill: statusColor
                    },
                    text: { 
                    text: node.name, 
                    'font-size': letterSize, 
                    'font-family': 'monospace',
                    },
                    rect: {
                        rx: 10, ry: 10,
                        stroke: '#000',
                        //magnet: true
                        transform: 'translate(1, 1)'
                    }
                }
            });
        }
        
        // Main.
        // -----
        var graphScale = 1
        
        // Just give the viewport a little padding.
        V(paper.viewport).translate(20, 20);
        
        $('#btn-layout').on('click', layout);
        
        function layout() {      
            try {
                var dataList = eval('dataList = ' + $('#adjacency-list').val());
            } catch (e) { alert(e); }

            var cells = buildGraph(dataList);
            graph.resetCells(cells);
            joint.layout.DirectedGraph.layout(graph, {
                dagre: dagre,
                graphlib: graphlib,
                setLinkVertices: false,
                rankDir: "TB",
                nodeSep: 100,
                rankSep: 100
            });
        }
        layout();

        </script>
    </body>
</html>