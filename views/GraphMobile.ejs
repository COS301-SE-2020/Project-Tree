<!DOCTYPE html>
<html>
    <head>
        <style>
            #toolbar{
                display: none;
            }
            #paper{
                height: 100vh; 
                width: 100vw;
            }
            .btn{
                width: 20%;
                height: 3em;
                border-radius: 5px;
                border-style: solid;
                background-color: #184D47;
                color: white;
            }
        </style>
        <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/4.7.0/css/font-awesome.min.css">
        <link rel="stylesheet" type="text/css" href="https://cdnjs.cloudflare.com/ajax/libs/jointjs/2.1.0/joint.css" />
        <meta name="viewport" content="height=device-height, width=device-width, user-scalable=no" />
    </head>
    <body>
        <div id="toolbar">
            <textarea id="adjacency-list">
                {
                    "nodes": <%= tasks %>,
                    "rels": <%= rels %>
                }
            </textarea>
            <textarea id="graphdirection">
                <%= graphDirection %>
            </textarea>
            <textarea id="criticalpath">
                <%= criticalPath %>
						</textarea>
						<textarea id="views">
							<%= views %>
						</textarea>
        </div>
        <div style="display:flex; justify-content:space-around;">
            <button class="btn" onclick="zoomIn()"><i class="fa fa-search-plus"></i></button>
            <button class="btn" onclick="zoomOut()"><i class="fa fa-search-minus"></i></button>
            <button class="btn" onclick="resetZoom()"><i class="fa fa-undo"></i></button>
        </div><br />
        <div id="paper"></div>        

        <!-- dependencies -->
        <script src="https://cdnjs.cloudflare.com/ajax/libs/dagre/0.8.5/dagre.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/graphlib/2.1.8/graphlib.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/dagre-d3/0.6.4/dagre-d3.min.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jquery/3.1.1/jquery.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/lodash.js/3.10.1/lodash.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/backbone.js/1.3.3/backbone.js"></script>
        <script src="https://cdnjs.cloudflare.com/ajax/libs/jointjs/2.1.0/joint.js"></script>
        <!-- code -->
    <script type="text/javascript">
        var dragStartPosition
        var nodeTouch = false;
				var count = 0;
				var globalCells = null;

        var graph = new joint.dia.Graph();
        var paper = new joint.dia.Paper({
            el: $('#paper'),
            gridSize: 10,
            model: graph,
            linkPinning: false,
            interactive: false
        });
        paperScale(0.8,0.8)

        /*
        *   Detect and handle clicks on nodes and links
        */ 
        paper.on('element:pointerdown', (event) => {handleDownNodeClick()});
        paper.on('element:pointerup', (event) => {
					if(event.model.attributes.attrs.originId !== undefined){
						handleUpNodeClick(event.model.attributes.attrs.originId, event.model.id)
					}
					else{
						handleUpNodeClick(event.model.id)
					}
				})
        paper.on('link:pointerdown', (event) => {handleLinkClick(event.model)});

        var initialDownClick = null;
        function handleDownNodeClick(){
					nodeTouch = true;
					initialDownClick = performance.now();
        }

        function handleUpNodeClick(input,cloned){
					if((performance.now()-initialDownClick) < 600){
						window.ReactNativeWebView.postMessage('n'+input+' cloned'+cloned);
					}
					else{
						window.ReactNativeWebView.postMessage('c'+input+' cloned'+cloned);
					}
        }

        function handleLinkClick(input){
					var views = eval('views = ' + $('#views').val());
					let source = parseInt(input.attributes.source.id);
      		let target = parseInt(input.attributes.target.id);
					let sourceView = null;
					let targetView = null;

					for(let x = 0; x < views.length; x++) {
						if(views[x].id === source){
							sourceView = source;
						}
						else if(views[x].id === target){
							targetView = target;
						}
					}

					nodeTouch = true;
					window.ReactNativeWebView.postMessage('l'+input.id+' sourceView'+sourceView+' targetView'+targetView);
        }

        /*
        *   Page Panning
        */
        paper.on('blank:pointerdown', (event, x, y) =>{
					dragStartPosition = { x: x*graphScale, y: y*graphScale};
        });
        paper.on('blank:pointerup', ()=>{
					dragStartPosition = null;
        });        
        paper.on('blank:pointermove', (event, x, y)=>{
					if (dragStartPosition){
						paper.translate(
							event.clientX - dragStartPosition.x, 
							event.clientY - dragStartPosition.y
						);
					}
        });

        /*
        *   Functions to zoom the page
        */
        var graphScale = 0.8
        function paperScale(sx, sy){
					paper.scale(sx, sy);
        };

        function zoomOut(){
					graphScale -= 0.1;
					this.paperScale(graphScale, graphScale);
        };

        function zoomIn(){
					graphScale += 0.1;
					this.paperScale(graphScale, graphScale);
        }

        function resetZoom(){
					graphScale = 0.8;
					this.paperScale(graphScale, graphScale);
        };

        /*
        *   Build graph by creating nodes and links
        */
        function buildGraph(data,criticalPath,viewNodes) {
					var elements = [];
					var links = [];

					let criticalPathLinks = [];
					let criticalPathNodes = [];
					if(criticalPath !== null && criticalPath.path !== null)
						criticalPath.path.segments.forEach(element => {
							criticalPathNodes.push(element.start.identity.low);
							criticalPathLinks.push(element.relationship.identity.low);
							criticalPathNodes.push(element.end.identity.low);
					});
					
					_.each(data.nodes, function(node) {
					elements.push(makeElement(node,criticalPathNodes));
					})
					
					_.each(data.rels, function(edge) {
					links.push(makeLink(edge,criticalPathLinks)); 
					})

					let allNodes = elements.concat(links);
					let clonedNodes = elements.concat(links);
					if(viewNodes !== null){
						for(let x = 0; x < viewNodes.length; x++){
							for(let y = 0; y < allNodes.length; y++){
								if(viewNodes[x].originalNode === parseInt(allNodes[y].id)){
									let clonedNode = allNodes[y].clone();

									var width = 100;
									var height = 80;

									var wraptext = joint.util.breakText(`(View) ${allNodes[y].attributes.attrs.text.text}`, {
										width: width - 20,
										height: height,
									});

									clonedNode.attributes.attrs.text.text = `${wraptext}`
									clonedNode.attributes.attrs.originId = allNodes[y].id;
									clonedNode.attributes.id = `${viewNodes[x].id}`;
									clonedNode.id = `${viewNodes[x].id}`;
									clonedNodes.push(clonedNode);
								}

								for(let z = 0; z < viewNodes[x].outDepArr.length; z++){
									if(viewNodes[x].outDepArr[z].low === allNodes[y].id){
										allNodes[y].attributes.source = {id: `${viewNodes[x].id}`};
									}
								}

								for(let a = 0; a < viewNodes[x].inDepArr.length; a++){
									if(viewNodes[x].inDepArr[a].low === allNodes[y].id){
										allNodes[y].attributes.target = {id: `${viewNodes[x].id}`};
									}
								}
							}
						}
					}
				return clonedNodes;
			}
        
			function makeLink(edge,criticalPathLinks) {
				var strokeColor = '#000';
				if(criticalPathLinks.includes(edge.id)) strokeColor = "#0275d8";
				return new joint.shapes.standard.Link({
					id:edge.id,
					source:{id:`${edge.source}`},
					target:{id:`${edge.target}`},
					connector:{name:'smooth'},
					// router:{name:'manhattan'},
					attrs: {
						type:'link',
						line: {stroke:strokeColor}
					}
				})
			}
        
			function makeElement(node,criticalPathNodes) {
				var letterSize = 16;
				var width = 100
				var height = 80

				var wraptext = joint.util.breakText(node.name, {
					width: width-20,
					height: height
				});

            let statusColor = '#77DD77'
            if(node.type === "Incomplete"){
                let today = new Date();
                if (today > new Date(node.endDate)) statusColor = "#ff6961";
            }
            else if(node.type === "Complete"){
                statusColor = '#77dd77'
            }
            else if(node.type === "Issue"){
                statusColor = '#ffae42'
            }

				let borderColor = '#000';
				if(criticalPathNodes.includes(node.id)) borderColor = '#0275d8';

				let shadowHighlight = {
					name: 'dropShadow',
					args: {
					dx: 1,
					dy: 1,
					blur: 2
					}
				}
				if(node.highlighted !== undefined){
						shadowHighlight = {
						name: 'highlight',
						args: {
							color: '#009999',
							width: 3,
							opacity: 0.7,
							blur: 5
						}
					}
				}

				return new joint.shapes.standard.Rectangle({
						id: `${node.id}`,
						size:{
							width:width,
							height:height
						},
						attrs:{
								type:'node',
								body: {
										stroke: borderColor,
										fill: {
												type: 'linearGradient',
												stops: [
														{ offset: `${node.progress}%`, color: statusColor },
														{ offset: `${node.progress+1}%`, color: '#fff' },
												]
										},
										filter: shadowHighlight,
								},
								rect:{
										rx: 10, ry: 10,
										//magnet: true
										transform: 'translate(15, 15)'
								},
								text:{ 
										text: wraptext, 
										'font-size': letterSize, 
										'font-family': 'monospace',
										transform: 'translate(15, 15)'
								},
								
						}
				});
			}
        
        $('#btn-layout').on('click', layout);
        
        function layout() {      
            try {
                var dataList = eval('dataList = ' + $('#adjacency-list').val());
                var graphDirection = eval($('#graphdirection').val());
                var criticalPath = eval('criticalPath = ' + $('#criticalpath').val());
                var views = eval('views = ' + $('#views').val());
            } catch (e) { alert(e); }

						var cells = buildGraph(dataList,criticalPath,views);
						globalCells = cells;
            graph.resetCells(cells);
            joint.layout.DirectedGraph.layout(graph, {
                dagre: dagre,
                graphlib: graphlib,
                setLinkVertices: false,
                rankDir: graphDirection,
                nodeSep: 25,
                rankSep: 50
            });
        }
        layout();

        </script>
    </body>
</html>